{"pages":[{"title":"分类","text":"","link":"/categories/index.html"},{"title":"分类","text":"","link":"/tags/index.html"}],"posts":[{"title":"Git报错enSSL SSL_read Connection was reset解决方法","text":"从GitHub开始使用SSL验证以后，如果SSL证书没有第三方验证就会经常报错： 1fatal: unable to access ‘https://github.com/xxxx‘: OpenSSL SSL_read: Connection was reset 解决方式就是关闭SSL验证： 1git config --global http.sslVerify &quot;false&quot; 关闭SSL以后再使用就会没问题","link":"/posts/78c2ab79/"},{"title":"常用Git命令组合","text":"Git是一个免费的开源分布式版本控制系统，可以快速高效地处理从小型到大型项目的所有事务，日常开发中使用到。 一般我们经常使用到的git命令就几个，而如果要把git用好，综合会有一百多个命令，本文会把我常用到的git命令记录，以便于我在开发中查询使用。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 零.Git常用命令组合添加仓库 12345git initgit remote add origin git@github.com/xxxxxx.gitgit branch -agit fetch git pull [远端仓库] [分支名] ssh秘钥配置 1234567#设置用户git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@xx.com&quot;#通过ed25519方式加密,rsa加密方式有时会出现密钥无效的情况ssh-keygen -t ed25519 -C &quot;xxx@xx.com&quot;#rsa加密方式ssh-keygen -t rsa -C &quot;xxx@xx.com&quot; 提交远程仓库组合 123456789#添加当前目录的所有文件到暂存区git add .# 取回远程仓库的变化，并与本地分支合并git pull# 提交暂存区到仓库区git commit -m &quot;备注”# 提交git push 撤销代码 12345678#查看当前分支git branch -a#查看状态git status#撤销指定目标文件已经add到缓存区的文件git reset HEAD -- filename#查看状态git status 修改代码 123456# 切换到devgit checkout dev# 取回远程仓库的变化，并与本地分支合并git pull #合并远程指定分支到当前分支git merge origin main 一.Git常用命令汇总1.创建代码库12345678# 在当前目录初始化一个Git代码库$ git init# 新建目录，将其初始化为Git代码库$ git init [project-name]# 克隆指定项目$ git clone [url] 2.配置Git的设置文件为.gitconfig，在主目录下配置（全局配置），也可项目目录下配置（项目配置） 123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件 （最好不要使用，除非指定了编辑器）$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 3.添/删/改文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 4.提交代码123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 5.分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 6.标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 7.查看123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 8.同步123456789101112131415161718192021222324# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 9.撤销1234567891011121314151617181920212223242526272829303132# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 10.其他12# 生成一个可供发布的压缩包$ git archive","link":"/posts/39047/"},{"title":"Git请求超时Timed out解决方法","text":"​ 最近在使用git的时候多次报错： 12git push origin master fatal: unable to access 'https://github.com/xxx.git/':Failed to connect to github.com port 443: Timed out 提示连接超时。 尝试了多种方式解决： ​ 1.配置和删除git proxy的方式，不行！ ​ 2.使用科学上网的方式，不行！ 最后，使用如下方法解决： ​ 1.打开https://www.ipaddress.com（科学上网）； ​ 2.分别查询github.com和github.global.ssl.fastly.net的IP，并记录下来； ​ 3.快捷键Win+R,输入drivers； ​ 4.找到etc文件夹下的hosts文件； ​ 5.输入ip和对应的域名，如： 12140.82.113.4 github.com199.232.69.194 github.global.ssl.Fastly.net 现在再次连接不会超时了。 估计是DNS无法正确解析到正确的IP造成的连接超时！","link":"/posts/78c2ab79/"}],"tags":[{"name":"脚本","slug":"脚本","link":"/tags/%E8%84%9A%E6%9C%AC/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"git命令","slug":"git命令","link":"/tags/git%E5%91%BD%E4%BB%A4/"}],"categories":[{"name":"git","slug":"git","link":"/categories/git/"}]}